<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Script" referent="RBX0">
		<Properties>
			<bool name="Disabled">false</bool>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">HealthGui</string>
			<ProtectedString name="Source">function onPlayerEntered(newPlayer)
end
game.Players.ChildAdded:connect(onPlayerEntered)
function onPlayerRespawned(newPlayer)
local Player = game.Players:GetPlayerFromCharacter(newPlayer)
if Player then
if Player.Character ~= nil and Player.Backpack ~= nil then
local HS1 = script[&quot;HealthScript v3.1&quot;]:Clone()
HS1.Parent = Player.Character
HS1.Disabled = false
local HS2 = script.Health:Clone()
HS2.Parent = Player.Character
HS2.Disabled = false
local CS = script.CoreScript:Clone()
CS.Parent = Player.Backpack
CS.Disabled = false
end
end
end
game.Workspace.ChildAdded:connect(onPlayerRespawned)</ProtectedString>
		</Properties>
		<Item class="LocalScript" referent="RBX1">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">CoreScript</string>
				<ProtectedString name="Source">game.StarterGui:SetCoreGuiEnabled(&quot;Health&quot;, false)
game.StarterGui:SetCoreGuiEnabled(&quot;Backpack&quot;, true)



</ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX2">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">HealthScript v3.1</string>
				<ProtectedString name="Source">local HealthGUI_prototype = script:FindFirstChild(&quot;HealthGUI&quot;)
local lastHealth = 100
local lastHealth2 = 100
local maxWidth = 0.96

local humanoid = script.Parent.Humanoid

if (humanoid == nil) then
&#9;print(&quot;ERROR: no humanoid found in &apos;HealthScript v3.1&apos;&quot;)
end


function CreateGUI()
&#9;local p = game.Players:GetPlayerFromCharacter(humanoid.Parent)
&#9;HealthGUI_prototype.Parent = p.PlayerGui
end

function UpdateGUI(health)
&#9;tray = HealthGUI_prototype.tray
&#9;local width = (health / humanoid.MaxHealth) * maxWidth
&#9;local height = 0.83
&#9;local lastX = tray.bar.Position.X.Scale
&#9;local x = 0.019 + (maxWidth - width)
&#9;local y = 0.1
&#9;
&#9;tray.bar.Position = UDim2.new(x,0,y, 0) 
&#9;tray.bar.Size = UDim2.new(width, 0, height, 0)
&#9;-- If more than 1/4 health, bar = green.  Else, bar = red.
&#9;if( (health / humanoid.MaxHealth) &gt; 0.25 ) then
&#9;&#9;tray.barRed.Size = UDim2.new(0, 0, 0, 0)
&#9;else
&#9;&#9;tray.barRed.Position = tray.bar.Position
&#9;&#9;tray.barRed.Size = tray.bar.Size
&#9;&#9;tray.bar.Size = UDim2.new(0, 0, 0, 0)
&#9;end
&#9;
&#9;if ( (lastHealth - health) &gt; (humanoid.MaxHealth / 10) ) then
&#9;&#9;lastHealth = health

&#9;&#9;if humanoid.Health ~= humanoid.MaxHealth then
&#9;&#9;&#9;delay(0,function()
&#9;&#9;&#9;&#9;AnimateHurtOverlay()
&#9;&#9;&#9;end)
&#9;&#9;&#9;delay(0,function()
&#9;&#9;&#9;&#9;AnimateBars(x, y, lastX, height)
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;else
&#9;&#9;lastHealth = health
&#9;end
end


function HealthChanged(health)
&#9;UpdateGUI(health)
&#9;if ( (lastHealth2 - health) &gt; (humanoid.MaxHealth / 10) ) then
&#9;&#9;lastHealth2 = health
&#9;else
&#9;&#9;lastHealth2 = health
&#9;end
end

function AnimateBars(x, y, lastX, height)
&#9;tray = HealthGUI_prototype.tray
&#9;local width = math.abs(x - lastX)
&#9;if( x &gt; lastX ) then
&#9;&#9;x = lastX
&#9;end
&#9;tray.bar2.Position = UDim2.new(x,0, y, 0)
&#9;tray.bar2.Size = UDim2.new(width, 0, height, 0)
&#9;tray.bar2.BackgroundTransparency = 0
&#9;local GBchannels = 1
&#9;local j = 0.2

&#9;local i_total = 30
&#9;for i=1,i_total do
&#9;&#9;-- Increment Values
&#9;&#9;if (GBchannels &lt; 0.2) then
&#9;&#9;&#9;j = -j
&#9;&#9;end
&#9;&#9;GBchannels = GBchannels + j
&#9;&#9;if (i &gt; (i_total - 10)) then
&#9;&#9;&#9;tray.bar2.BackgroundTransparency = tray.bar2.BackgroundTransparency + 0.1
&#9;&#9;end
&#9;&#9;tray.bar2.BackgroundColor3 = Color3.new(1, GBchannels, GBchannels)
&#9;&#9;
&#9;&#9;wait(0.02)
&#9;end
end

function AnimateHurtOverlay()
&#9;-- Start:
&#9;-- overlay.Position = UDim2.new(0, 0, 0, -22)
&#9;-- overlay.Size = UDim2.new(1, 0, 1.15, 30)
&#9;
&#9;-- Finish:
&#9;-- overlay.Position = UDim2.new(-2, 0, -2, -22)
&#9;-- overlay.Size = UDim2.new(4.5, 0, 4.65, 30)
&#9;
&#9;overlay = HealthGUI_prototype.hurtOverlay
&#9;overlay.Position = UDim2.new(-2, 0, -2, -22)
&#9;overlay.Size = UDim2.new(4.5, 0, 4.65, 30)
&#9;-- Animate In, fast
&#9;local i_total = 2
&#9;local wiggle_total = 0
&#9;local wiggle_i = 0.02
&#9;for i=1,i_total do
&#9;&#9;overlay.Position = UDim2.new( (-2 + (2 * (i/i_total)) + wiggle_total/2), 0, (-2 + (2 * (i/i_total)) + wiggle_total/2), -22 )
&#9;&#9;overlay.Size = UDim2.new( (4.5 - (3.5 * (i/i_total)) + wiggle_total), 0, (4.65 - (3.5 * (i/i_total)) + wiggle_total), 30 )
&#9;&#9;wait(0.01)
&#9;end
&#9;
&#9;i_total = 30
&#9;
&#9;wait(0.03)
&#9;
&#9;-- Animate Out, slow
&#9;for i=1,i_total do
&#9;&#9;if( math.abs(wiggle_total) &gt; (wiggle_i * 3) ) then
&#9;&#9;&#9;wiggle_i = -wiggle_i
&#9;&#9;end
&#9;&#9;wiggle_total = wiggle_total + wiggle_i
&#9;&#9;overlay.Position = UDim2.new( (0 - (2 * (i/i_total)) + wiggle_total/2), 0, (0 - (2 * (i/i_total)) + wiggle_total/2), -22 )
&#9;&#9;overlay.Size = UDim2.new( (1 + (3.5 * (i/i_total)) + wiggle_total), 0, (1.15 + (3.5 * (i/i_total)) + wiggle_total), 30 )
&#9;&#9;wait(0.01)
&#9;end
&#9;
&#9;-- Hide after we&apos;re done
&#9;overlay.Position = UDim2.new(10, 0, 0, 0)
end

CreateGUI()
humanoid.HealthChanged:connect(HealthChanged)
humanoid.Died:connect(function() HealthChanged(0) end)</ProtectedString>
			</Properties>
			<Item class="GuiMain" referent="RBX3">
				<Properties>
					<string name="Name">HealthGUI</string>
				</Properties>
				<Item class="ImageLabel" referent="RBX4">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4290164919</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<Content name="Image"><url>rbxasset://textures/hurtoverlay.png</url></Content>
						<string name="Name">hurtOverlay</string>
						<UDim2 name="Position">
							<XS>2</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>-22</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>1.1500001</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBX5">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4285215356</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">tray</string>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>-44</XO>
							<YS>1</YS>
							<YO>-26</YO>
						</UDim2>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>170</XO>
							<YS>0</YS>
							<YO>18</YO>
						</UDim2>
						<token name="SizeConstraint">2</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="ImageLabel" referent="RBX6">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>rbxasset://textures/bkg.png</url></Content>
							<string name="Name">bkg</string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="ImageLabel" referent="RBX7">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>rbxasset://textures/barred.png</url></Content>
							<string name="Name">barRed</string>
							<UDim2 name="Position">
								<XS>0.0189999994</XS>
								<XO>0</XO>
								<YS>0.100000001</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Frame" referent="RBX8">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1.00000012</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">bar2</string>
							<UDim2 name="Position">
								<XS>0.0189999994</XS>
								<XO>0</XO>
								<YS>0.100000001</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0.192000002</XS>
								<XO>0</XO>
								<YS>0.829999983</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="ImageLabel" referent="RBX9">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>rbxasset://textures/bar.png</url></Content>
							<string name="Name">bar</string>
							<UDim2 name="Position">
								<XS>0.0189999994</XS>
								<XO>0</XO>
								<YS>0.100000001</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0.959999979</XS>
								<XO>0</XO>
								<YS>0.829999983</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="ImageLabel" referent="RBX10">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="Image"><url>rbxasset://textures/label.png</url></Content>
							<string name="Name">label</string>
							<UDim2 name="Position">
								<XS>0.680000007</XS>
								<XO>0</XO>
								<YS>0.300000012</YS>
								<YO>0</YO>
							</UDim2>
							<UDim2 name="Size">
								<XS>0.25</XS>
								<XO>0</XO>
								<YS>0.349999994</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBX11">
			<Properties>
				<bool name="Disabled">true</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Health</string>
				<ProtectedString name="Source">function waitForChild(parent, childName)
&#9;local child = parent:findFirstChild(childName)
&#9;if child then return child end
   while true do
&#9;&#9;child = parent.ChildAdded:wait()
&#9;&#9;if child.Name==childName then return child end
   end
end

-- declarations
local Figure = script.Parent
local Head = waitForChild(Figure, &quot;Head&quot;)
local Humanoid = waitForChild(Figure, &quot;Humanoid&quot;)
local regening = false

-- regeneration
function regenHealth()
&#9;if regening then return end
&#9;regening = true
&#9;while Humanoid.Health &lt; Humanoid.MaxHealth do
&#9;&#9;local s = wait(1)
&#9;&#9;local health = Humanoid.Health
&#9;&#9;if health &gt; 0 and health &lt; Humanoid.MaxHealth then
&#9;&#9;&#9;local newHealthDelta = 0.01 * s * Humanoid.MaxHealth
&#9;&#9;&#9;health = health + newHealthDelta
&#9;&#9;&#9;Humanoid.Health = math.min(health,Humanoid.MaxHealth)
&#9;&#9;end
&#9;end
&#9;if Humanoid.Health &gt; Humanoid.MaxHealth then
&#9;&#9;Humanoid.Health = Humanoid.MaxHealth
&#9;end
&#9;regening = false
end

Humanoid.HealthChanged:connect(regenHealth)
      </ProtectedString>
			</Properties>
		</Item>
	</Item>
</roblox>